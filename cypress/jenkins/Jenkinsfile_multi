#!groovy

def branch = "master"
def test_tags_raw = "${env.TEST_TAGS}".split(',')
def test_tags = []
for (String tag : test_tags_raw) {
    test_tags.add(tag.trim())
}
def all_cypress_tags = "${env.CYPRESS_TAGS}".split('\\|')

// Function to get KDM branch for a Rancher version
def getKdmBranch(rancherVersion, testTags) {
    if (rancherVersion == "head") {
        // Find the highest version from test tags and increment it
        def latestVersion = ""
        for (String tag : testTags) {
            def versionMatch = tag =~ /v(\d+\.\d+)-head/
            if (versionMatch) {
                def currentVersion = versionMatch[0][1]
                if (currentVersion > latestVersion) {
                    latestVersion = currentVersion
                }
            }
        }
        // Increment minor version
        if (latestVersion.isEmpty()) {
            error("Cannot determine KDM branch for 'head' image. Please provide at least one version tag (e.g., v2.12-head) in TEST_TAGS.")
        }
        def parts = latestVersion.split('\\.')
        def minor = (parts[1] as Integer) + 1
        return "dev-v${parts[0]}.${minor}"
    }
    
    // Extract version from image tags (e.g."v2.12-head")
    def versionMatch = rancherVersion =~ /v(\d+\.\d+)-head/
    if (versionMatch) {
        def majorMinor = versionMatch[0][1]
        return "dev-v${majorMinor}"
    }
    
    error("Unable to determine KDM branch for Rancher version: ${rancherVersion}")
}

// Function to fetch latest K3s version from KDM
def getLatestK3sVersion(rancherVersion, testTags) {
    def kdmBranch = getKdmBranch(rancherVersion, testTags)
    def kdmUrl = "https://raw.githubusercontent.com/rancher/kontainer-driver-metadata/${kdmBranch}/data/data.json"
    
    try {
        def kdmData = sh(
            script: "curl -s '${kdmUrl}' | grep '\"version\":' | grep '+k3s' | sed 's/.*\"version\": \"\\([^\"]*+k3s[0-9]*\\)\".*/\\1/' | tail -1",
            returnStdout: true
        ).trim()
        
        if (!kdmData || kdmData.isEmpty()) {
            error("Failed to fetch K3s version from KDM for ${rancherVersion}")
        }
        
        return kdmData
    } catch (Exception e) {
        error("Error fetching KDM data for ${rancherVersion}: ${e.getMessage()}")
    }
}

if ("${env.branch}" != "null" && "${env.branch}" != "") {
  branch = "${env.branch}"
}

if ("${env.CORRAL_PACKAGES_REPO}" != "null" && "${env.CORRAL_PACKAGES_REPO}" != "") {
      corralRepo = "${env.CORRAL_PACKAGES_REPO}"
}

if ("${env.CORRAL_PACKAGES_BRANCH}" != "null" && "${env.CORRAL_PACKAGES_BRANCH}" != "") {
      corralBranch = "${env.CORRAL_PACKAGES_BRANCH}"
}

node {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
    withFolderProperties {
      paramsMap = []
        params.each {
          paramsMap << "$it.key=$it.value"
      }
        withEnv(paramsMap) {
            stage('Checkout') {
            deleteDir()
            checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${branch}"]],
                        extensions: scm.extensions + [[$class: 'CleanCheckout']],
                        userRemoteConfigs: scm.userRemoteConfigs
                    ])
            }
            
            // Generate K8s versions dynamically from KDM
            def k8s_versions = []
            for (String rancherVersion : test_tags) {
                def k8sVersion = getLatestK3sVersion(rancherVersion, test_tags)
                k8s_versions.add(k8sVersion)
            }
            
            try {
                stage('Run Tests') {
                    jobs = [:]
                    test_tags.eachWithIndex { String rancher_version, int i ->
                        String k8s_version = k8s_versions[i]
                        all_cypress_tags.each { String ct ->
                            echo "RANCHER_TAG: ${rancher_version}, K8S_VERSION: ${k8s_version}, CYPRESS_TAGS: ${ct}"
                            params = null
                            params = [  string(name: 'JOB_TYPE', value: "${JOB_TYPE}"),
                                        string(name: 'CORRAL_PACKAGES_BRANCH', value: "${CORRAL_PACKAGES_BRANCH}"),
                                        string(name: 'CORRAL_PACKAGES_REPO', value: "${CORRAL_PACKAGES_REPO}"),
                                        text(name: 'CORRAL_PACKAGE_CONFIG', value: "${CORRAL_PACKAGE_CONFIG}"),
                                        string(name: 'CORRAL_VERSION', value: "${CORRAL_VERSION}"),
                                        string(name: 'AWS_SSH_USER', value: "${AWS_SSH_USER}"),
                                        string(name: 'AWS_AMI', value: "${AWS_AMI}"),
                                        string(name: 'AWS_REGION', value: "${AWS_REGION}"),
                                        string(name: 'AWS_SUBNET', value: "${AWS_SUBNET}"),
                                        string(name: 'AWS_VPC', value: "${AWS_VPC}"),
                                        string(name: 'AWS_INSTANCE_TYPE', value: "${AWS_INSTANCE_TYPE}"),
                                        string(name: 'AWS_VOLUME_TYPE', value: "${AWS_VOLUME_TYPE}"),
                                        string(name: 'AWS_VOLUME_IOPS', value: "${AWS_VOLUME_IOPS}"),
                                        string(name: 'AWS_VOLUME_SIZE', value: "${AWS_VOLUME_SIZE}"),
                                        string(name: 'AWS_ROUTE53_ZONE', value: "${AWS_ROUTE53_ZONE}"),
                                        string(name: 'NODEJS_VERSION', value: "${NODEJS_VERSION}"),
                                        string(name: 'DASHBOARD_REPO', value: "${DASHBOARD_REPO}"),
                                        string(name: 'DASHBOARD_BRANCH', value: "${DASHBOARD_BRANCH}"),
                                        string(name: 'CYPRESS_TAGS', value: ct),
                                        string(name: 'RANCHER_HOST', value: ""),
                                        string(name: 'RANCHER_USERNAME', value: "${RANCHER_USERNAME}"),
                                        string(name: 'RANCHER_PASSWORD', value: "${RANCHER_PASSWORD}"),
                                        string(name: 'K3S_KUBERNETES_VERSION', value: k8s_version),
                                        string(name: 'CERT_MANAGER_VERSION', value: "${CERT_MANAGER_VERSION}"),
                                        string(name: 'SERVER_COUNT', value: "${SERVER_COUNT}"),
                                        string(name: 'AGENT_COUNT', value: "${AGENT_COUNT}"),
                                        string(name: 'BOOTSTRAP_PASSWORD', value: "${BOOTSTRAP_PASSWORD}"),
                                        string(name: 'BRANCH', value: "${BRANCH}"),
                                        string(name: 'CYPRESS_VERSION', value: "${CYPRESS_VERSION}"),
                                        string(name: 'YARN_VERSION', value: "${YARN_VERSION}"),
                                        string(name: 'CHROME_VERSION', value: "${CHROME_VERSION}"),
                                        string(name: 'QASE_PROJECT', value: "${QASE_PROJECT}"),
                                        string(name: 'QASE_REPORT', value: "${QASE_REPORT}"),
                                        string(name: 'RANCHER_IMAGE_TAG', value: rancher_version)]
                            build (job: 'ui-automation-job', parameters: params, propagate: false, wait: false)
                        }
                    }
                }
            } catch (err) {
                echo "Error: " + err
                currentBuild.result = 'FAILURE'
                error()
            }
        }
    }
  }
}
