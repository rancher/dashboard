#!/usr/bin/env bash
set -x

# K3S_VERSION=v1.33.1+k3s1 // Can only install rc1, which has a max of 1.33
K3S_VERSION=v1.32.6+k3s1

# Image version
RANCHER_IMG_REPO=tlebreux/rancher
RANCHER_IMG_TAG=sha256:5e865d79249db99713858d3e216c71ad434605aef5242c508153a8bebef0ca56
RANCHER_AGENT_IMG=tlebreux/rancher@sha256:6de928745e75b2fb53535b27d255c1f0448ce29e9f7b2f86ebb410be9e4c8bdf

# check if script invoke contains any argument. If so, adjust RANCHER_IMG_TAG
if [ $# -eq 1 ]; then
  RANCHER_IMG_TAG=$1
fi

DASHBOARD_URL="${TEST_BASE_URL#https://}"
NAMESPACE=cattle-system

DIR=$(cd $(dirname $0)/..; pwd)

# See `script/build-e2e`. This is the ui builds we wish to test
DASHBOARD_DIST=${DIR}/dist
EMBER_DIST=${DIR}/dist_ember

echo "Installing k3s (with kubectl).........."
curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="$K3S_VERSION" sh -
export KUBECONFIG=~/.kube/config
mkdir ~/.kube 2> /dev/null
sudo k3s kubectl config view --raw > "$KUBECONFIG"
chmod 600 "$KUBECONFIG"

echo "Installing helm.........."
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

echo "Installing cert-manager.........."
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm install cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.7.1

echo "Cert manager pods should be up"
kubectl get pods --namespace cert-manager

# rancher-latest --devel will have rc's
HELM_REPO=rancher-alpha

echo "Setting up Rancher Repo.........."
helm repo add $HELM_REPO https://releases.rancher.com/server-charts/latest
helm repo update
helm search repo $HELM_REPO --devel

echo "Installing Rancher.........."
kubectl create ns $NAMESPACE
helm install rancher $HELM_REPO/rancher \
  --namespace cattle-system \
  --devel \
  --set hostname=$DASHBOARD_URL \
  --set replicas="1" \
  --set rancherImage="$RANCHER_IMG_REPO" \
  --set rancherImageTag="$RANCHER_IMG_TAG" \
  --set rancherImagePullPolicy="Always" \
  --set extraEnv\[0\].name="CATTLE_AGENT_IMAGE" \
  --set-string extraEnv\[0\].value="$RANCHER_AGENT_IMG" \
  --set extraEnv\[1\].name="CATTLE_UI_OFFLINE_PREFERRED" \
  --set-string extraEnv\[1\].value="true" \
  --set extraEnv\[2\].name="CATTLE_BOOTSTRAP_PASSWORD" \
  --set-string extraEnv\[2\].value="password" \
  --set extraEnv\[3\].name="CATTLE_PASSWORD_MIN_LENGTH" \
  --set-string extraEnv\[3\].value="3" \
  --set 'extraEnv[4].name=CATTLE_FEATURES' \
  --set 'extraEnv[4].value=oidc-provider=true'

#  --set extraEnv\[4\].name="CATTLE_FEATURES" \
#  --set-string extraEnv\[4\].value="oidc-provider=true" \

echo "Waiting for Rancher to come up.........."
kubectl -n cattle-system rollout status deploy/rancher

echo "Waiting for dashboard UI to be reachable.........."

okay=0

while [ $okay -lt 20 ]; do
  STATUS=$(curl --silent --location --head -k $DASHBOARD_URL/dashboard/ | awk -F'HTTP/2 ' '{print $2}' | awk 'length { print $1}')

  echo "Status: $STATUS (Try: $okay)"

  okay=$((okay+1))

  if [ "$STATUS" == "200" ]; then
    okay=100
  else
    sleep 5
  fi
done

if [ "$STATUS" != "200" ]; then
  echo "Dashboard did not become available in a reasonable time"
  exit 1
fi

echo "Updating UI within Rancher container.........."
# Note - these will pick the first container within the pod, so replicas=1 above is important
POD_NAME=$(kubectl get pods --selector=app=rancher -n $NAMESPACE | tail -n 1 | cut -d ' ' -f1)
echo "POD NAME: $POD_NAME"
if [ "$POD_NAME" == "" ]; then
  echo "Failed to find rancher pod"
  exit 1
fi

# Remove root folders that container UIs
kubectl exec $POD_NAME -n $NAMESPACE -- sh -c 'rm -rf /usr/share/rancher/ui-dashboard/dashboard'
kubectl exec $POD_NAME -n $NAMESPACE -- sh -c 'rm -rf /usr/share/rancher/ui'

# Copy local builds to root folders that should contain UIs
mv $DASHBOARD_DIST dashboard
mv $EMBER_DIST ui
kubectl cp dashboard $POD_NAME:/usr/share/rancher/ui-dashboard -n $NAMESPACE
kubectl cp ui $POD_NAME:/usr/share/rancher -n $NAMESPACE

# Final validation
STATUS=$(curl --silent --location --head -k $DASHBOARD_URL/dashboard/ | awk -F'HTTP/2 ' '{print $2}' | awk 'length { print $1}')
echo "Status: $STATUS"

if [ "$STATUS" != "200" ]; then
  echo "After updating dashboard with dev build it is no longer available"
  exit 1
fi

echo "Dashboard UI is ready"

echo "Waiting for rancher-webhook to be running..."
okay=0
while [ $okay -lt 30 ] ; do
  if kubectl -n cattle-system get po -l app=rancher-webhook | grep -q '1/1.*Running' ; then
    break
  else
    echo "Webhook not ready, checking again in 10s..."
    okay=$((okay+1))
    sleep 10
  fi
done

echo "Waiting for capi-webhook-service to exist..."
okay=0
while [ $okay -lt 30 ] ; do
  if kubectl -n cattle-provisioning-capi-system get service capi-webhook-service | grep '443/TCP' ; then
    break
  else
    echo "capi-webhook-service does not exist, checking again in 10s..."
    okay=$((okay+1))
    sleep 10
  fi
done

echo "Rancher is ready"